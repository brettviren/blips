blips 

* wires


#+BEGIN_EXAMPLE
  $ wirecell-util make-wires foo.json.bz2
  $ wirecell-util plot-select-channels foo.json.bz2 figures/select-u-chans.svg  1000 1340 1399
  $ wirecell-util plot-select-channels foo.json.bz2 figures/select-v-chans.svg  2000 2059  2399
#+END_EXAMPLE

[[./figures/select-u-chans.svg]]

[[./figures/select-v-chans.svg]]

[[./figures/select-w-chans.svg]]

* average Ar39 shape

#+BEGIN_EXAMPLE
$ source  venv2/bin/activate

#+END_EXAMPLE


[[./figures/ar39avgshape.pdf]]


* selection

** Alex/Mike

#+BEGIN_QUOTE
[...] integrating around some fixed
window size, centered at the wire/tick with maximum signal amplitude
for the tagged Ar-39 candidate event.
#+END_QUOTE

- window :: 3 chans x 40 ticks


* Runtime

Use UPS binaries and start a subshell configured for them:

#+BEGIN_EXAMPLE
  $ ./ups-shenanigans.sh shell blips v0_7_blips
  $ which wire-cell
  /home/bviren/dev/wcls/pp/tasks/blips/wirecell/v0_7_blips/Linux64bit+4.4-2.23-e14-prof/bin/wire-cell
  $ export WIRECELL_PATH=`pwd`/wctcfg:/opt/bviren/wct-dev/share/wirecell/data:$HOME/dev/wct/src/cfg
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  $ wirecell-util make-wires -d apa dune-wires.json.bz2
  $ wire-cell -c wctcfg/noise-ar39-sim.jsonnet
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  $ wirecell-util make-map -d apa channel-map.npz
  $ ./waf configure build
  $ ./build/test_nparray channel-map.npz dune-wctsim-fullrate-adc-noise.npz  out.npz
#+END_EXAMPLE
