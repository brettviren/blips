#+title: blips 

This package studies finding activity in DUNE Single-Phase LArTPC using the digitized waveforms in the context of generating L0 /trigger primitives/ which can then be consumed to produce L1 or L2 /trigger commands/ that in turn are consumed to read out portions of the data stream.d

* Procedures

This is an exploration so there is no set procedures to use this code.  It's messy.  That said, here are some pointers.

** Install

The =blips= package is written in Python and C++.  The Python parts can be installed like

#+BEGIN_EXAMPLE
  $ virtualenv venv2
  $ source venv2/bin/activiate
  $ python setup.py develop
#+END_EXAMPLE

This will install a number of packages from PyPI as well as =wire-cell-python= from its GitHub Git repository.

** Set up 


The noise and signal simulation provided by the [[https://github.com/WireCell/][Wire-Cell Toolkit]] is used to produce some realistic, if fake, data similar to what is expected from the eventual DUNE detector.  It's use and analysis requires some data files.

*** Wires and Channel Map

The "geometry" required by the simulation is rather minimal if complex.  For signal formation, the only information needed are the endpoints of wire segments and their associated numeric identifier (sometimes called "channel number" to great confusion).  

The Wire-Cell Toolkit's Python module [[https://github.com/WireCell/wire-cell-python][=wirecell=]] provides code to generate the wires and to present the full electronics connectivity graph in various "channel maps".

First, make the wires

#+BEGIN_EXAMPLE
  $ wirecell-util make-wires -d apa dune-wires.json.bz2
  $ wirecell-util plot-wires dune-wires.json.bz2 doc/figs/dune-wires.pdf
#+END_EXAMPLE

The JSON file will be input to =wire-cell=.  The [[file:doc/figs/dune-wires.pdf][PDF file]] indicate the actual wire arrangements as well as some chosen conventions:

- wip :: the /wire in plane/ number which counts wire segments starting from most negative Z coordinate starting with 0 and adding another 10,000 for each subsequent plane in (U, V, W).
- ch :: the /channel identifier/ gives a unique (to the APA) number for each conductor in terms of WIN addressing.  

With the above, the =wire-cell= simulation will produce data which is addressed conceptually as it will be in protoDUNE/DUNE.  Like with the real data we must be able to associate a channel identifier with the set of attached wire segments, aka, the conductor.  
The identifier scheme chosen uses five digits formed from four one-based numbers:

- WIB connector :: 1-4, together the same WIB connector number from all WIBs service 1/2 of one APA face
- WIB board :: 1-5, in order the WIBs span that 1/2 APA face.  Ie, connector 1 of WIB 1,2,3,4,5 spans the first half of the "front" face (the Z<0 half).
- ASIC chip :: 1-8 counts the eight FE/ADC pairs on one FEMB.
- Chip address :: 1-16 counts the "channels" on an ADC (or equivalently on its paired FE)

The association is between these four numbers and:

- the wire /layer/ (aka "plane") on a face (U, V or W)
- the FEMB-local conductor attachment /spot/ in a given layer (1-40, 1-40, 1-48)

#+BEGIN_EXAMPLE
  $ wirecell-util make-map -d apa channel-map.npz

  $ wirecell-util make-map -d apa doc/channel-map.tex
  $ cd doc && latexmk -pdf channel-map-main.tex && cd -
#+END_EXAMPLE

The [[file:doc/channel-map-main.pdf][PDF file]] produced in that second command shows the set of *FEMB-local* numbers and their associations.  The first matrix allows for the tuple (chip,address) to be associated with (layer,conductor).  The subsequent tables invert that association and organize it to spatially map onto the physical top (or bottom) of the APA.  These numbers are correct for the first FEMB on the APA.  Subsequent runs of conductor attachment /spot/ can be trivially generated by adding 40, 40 or 48 times the number of FEMBs before the one of interest. 

*** Configure Simulation

Some =wire-cell= configuration files are kept under [[file:wctcfg/]].  A few subsequent JSON configuration are referenced.  The wires file is provided as above.  A /fields/  and /noise spectra/ files are also needed and provided by the [[https://github.com/WireCell/wire-cell-data][=wire-cell-data=]] package.

** Running Simulation

The simulation is almost fully controlled by its configuration file but will need to be able to locate =wire-cell-data= and the =wirecell.jsonnet= file as provided by the [[https://github.com/WireCell/wire-cell-cfg/][=wire-cell-cfg=]] package.

#+BEGIN_EXAMPLE
  $ export WIRECELL_DATA=/path/to/wire-cell-data:/path/to/wire-cell-cfg
  $ wire-cell -c wctcfg/noise-ar39-sim.jsonnet
  $ ls -l dune-wctsim-fullrate-adc-noise.npz
  -rw-rw-r-- 1 bviren bviren 159713178 Feb  1 11:59 dune-wctsim-fullrate-adc-noise.npz
#+END_EXAMPLE

The resulting file name may be different and is generated based on the exact options expressed in the Jsonnet configuration file.  *N.B.* =wire-cell= *appends* to the NPZ file.


** Running tests

*** Test production of L0 trigger primitives

Using the simulation output file run some quasi realistic L0 trigger primitive production code.

#+BEGIN_EXAMPLE
  $ ./waf configure build
  $ ./build/test_primitives channel-map.npz dune-wctsim-fullrate-adc-noise.npz primitives.npz > out.log
  ...
  numpy frame shape: (10000,2080)
  load npz in 0.151052
  copy 480 collection channels x 10000 ticks in 0.034877
  find baseline/thresholds in 0.0214748
  find 10888 primitives in 0.0185095
  dump intermdiates to numpy in 0.211291
#+END_EXAMPLE

Times are in seconds on a Xeon E5-2630 v4 @ 2.20GHz.  Rounding up, about 50 core-ms are needed to process 480 channels of 5ms data.  IOW, 20 cores (coincidentally one such Xeon CPU) is needed to keep up with one APA's collection data.  Note: this is a rather slow, if high thread count CPU.

** Plots

Some plotting code is exposed via the =blips= command line program.

#+BEGIN_EXAMPLE
  $ blips plot-frames -o figures/plot-frames.pdf dune-wctsim-fullrate-adc-noise.npz
  $ blips plot-primitives -o figures/plot-primitives.pdf primitives.npz
#+END_EXAMPLE

- [[file:figures/plot-frames.pdf][plot-frames.pdf]]
- [[figures/plot-primitives.pdf][plot-primitives.pdf]]


* Random notes

** wires


#+BEGIN_EXAMPLE
  $ wirecell-util make-wires foo.json.bz2
  $ wirecell-util plot-select-channels foo.json.bz2 figures/select-u-chans.svg  1000 1340 1399
  $ wirecell-util plot-select-channels foo.json.bz2 figures/select-v-chans.svg  2000 2059  2399
#+END_EXAMPLE

[[./figures/select-u-chans.svg]]

[[./figures/select-v-chans.svg]]

[[./figures/select-w-chans.svg]]

** average Ar39 shape

#+BEGIN_EXAMPLE
$ source  venv2/bin/activate

#+END_EXAMPLE


[[./figures/ar39avgshape.pdf]]


** selection

*** Alex/Mike

#+BEGIN_QUOTE
[...] integrating around some fixed
window size, centered at the wire/tick with maximum signal amplitude
for the tagged Ar-39 candidate event.
#+END_QUOTE

- window :: 3 chans x 40 ticks


** Runtime

Use UPS binaries and start a subshell configured for them:

#+BEGIN_EXAMPLE
  $ ./ups-shenanigans.sh shell blips v0_7_blips
  $ which wire-cell
  /home/bviren/dev/wcls/pp/tasks/blips/wirecell/v0_7_blips/Linux64bit+4.4-2.23-e14-prof/bin/wire-cell
  $ export WIRECELL_PATH=`pwd`/wctcfg:/opt/bviren/wct-dev/share/wirecell/data:$HOME/dev/wct/src/cfg
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  $ wirecell-util make-wires -d apa dune-wires.json.bz2
  $ wire-cell -c wctcfg/noise-ar39-sim.jsonnet
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  $ wirecell-util make-map -d apa channel-map.npz
  $ ./waf configure build
  $ ./build/test_nparray channel-map.npz dune-wctsim-fullrate-adc-noise.npz  out.npz
#+END_EXAMPLE
